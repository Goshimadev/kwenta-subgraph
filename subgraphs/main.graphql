"""
 THIS FILE IS AUTOMATICALLY GENERATED BY THE DEPLOY SCRIPT
"""
type FuturesMarket @entity {
  id: ID!
  asset: Bytes!
  marketStats: FuturesCumulativeStat!
}

type FuturesTrade @entity {
  id: ID!
  timestamp: BigInt!
  account: Bytes!
  size: BigInt!
  asset: Bytes!
  price: BigInt!
}

type FuturesPosition @entity {
  id: ID!
  lastTxHash: Bytes!
  timestamp: BigInt!
  market: Bytes!
  asset: Bytes!
  account: Bytes!
  isOpen: Boolean!
  isLiquidated: Boolean!
  size: BigInt!
  margin: BigInt!
  feesPaid: BigInt!
  entryPrice: BigInt!
  exitPrice: BigInt
}

type FuturesStat @entity {
  id: ID!
  account: Bytes!
  feesPaid: BigInt!
  pnl: BigInt!
  pnlWithFeesPaid: BigInt!
  liquidations: BigInt!
  totalTrades: BigInt!
  totalVolume: BigInt!
}

type FuturesCumulativeStat @entity {
  id: ID!
  totalLiquidations: BigInt!
  totalTrades: BigInt!
  totalVolume: BigInt!
  averageTradeSize: BigInt!
}

type FuturesOneMinStat @entity {
  id: ID!
  trades: BigInt!
  volume: BigInt!
  timestamp: BigInt!
}

type FuturesMarginTransfer @entity {
  id: ID!
  timestamp: BigInt!
  account: Bytes!
  market: Bytes!
  asset: Bytes!
  size: BigInt!
  txHash: String!
}

type FundingRateUpdate @entity {
  id: ID!
  timestamp: BigInt!
  market: Bytes!
  sequenceLength: BigInt!
  funding: BigInt!
}

type Candle @entity {
  " synth-period-periodId (periodId is timestamp / period) "
  id: ID!
  " Ticker for synth (e.g. 'sUSD') or 'SNX'"
  synth: String!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  average: BigDecimal!
  timestamp: BigInt!
  " Duration this candle captures in seconds. Year, quarter, month, week, day, hour, and 15 minutes available. "
  period: BigInt!
  " Number of RateUpdates aggregated into this candle, mostly useful for the indexer to calculate averages "
  aggregatedPrices: BigInt!
}

type InversePricingInfo @entity {
  " Name of inverse synth. E.g. iETH "
  id: ID!
  " whether or not this inverse synth has been frozen "
  frozen: Boolean!
  " configured upper limit "
  upperLimit: BigDecimal!
  " configured lower limit "
  lowerLimit: BigDecimal!
  " matching price point with long synth "
  entryPoint: BigDecimal!
}

type LatestRate @entity {
  " Name of synth. E.g. sUSD "
  id: ID!
  " Synth USD rate "
  rate: BigDecimal!
  " Address of the aggregator which produces current result "
  aggregator: Bytes!
}

" Latest Rates over time "
type RateUpdate @entity {
  " <transaction hash>-<currency key> "
  id: ID!
  " currencyKey for which this this rate update applies "
  currencyKey: Bytes!
  " currencyKey expressed as a string "
  synth: String!
  " the rate recorded at this timestamp "
  rate: BigDecimal!
  " the block which this rate was recorded "
  block: BigInt!
  " timestamp of the block in which the rate was recorded "
  timestamp: BigInt!
}
